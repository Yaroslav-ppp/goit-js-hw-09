{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","button","disabled","addEventListener","onBtnMakePromises","position","evt","preventDefault","delay","Number","currentTarget","elements","value","step","amount","setInterval","setTimeout","createPromise","then","console","log","catch","promise","Promise","resolve","reject","Math","random"],"mappings":";AAAA,MAAMA,EAAO,CAAGC,KAAMC,SAASC,cAAc,SAC7CC,OAAQF,SAASC,cAAc,WAE/BH,EAAKI,OAAOC,UAAW,EACvBL,EAAKC,KAAKK,iBAAiB,SAAUC,GACrC,IAAIC,EAAW,EAEf,SAASD,EAAmBE,GAE5BA,EAAIC,iBACJV,EAAKI,OAAOC,UAAW,EAEnBM,IAAAA,EAAQC,OAAOH,EAAII,cAAcC,SAASH,MAAMI,OAC9CC,MAAAA,EAAOJ,OAAOH,EAAII,cAAcC,SAASE,KAAKD,OAC9CE,EAASL,OAAOH,EAAII,cAAcC,SAASG,OAAOF,OAGxDG,YAAa,KAETD,IAAWT,IACfA,GAAY,EACZW,WAAW,KAAOR,GAASK,IAEzBI,EAAcZ,EAAUG,GACvBU,KAAK,EAAGb,SAAAA,EAAUG,MAAAA,MACjBW,QAAQC,2BAA2Bf,QAAeG,SAEnDa,MAAM,EAAGhB,SAAAA,EAAUG,MAAAA,MAClBW,QAAQC,0BAA0Bf,QAAeG,WAElDA,GAGH,SAASS,EAAcZ,EAAUG,GAW1Bc,OAVW,IAAIC,QAAS,CAACC,EAASC,KACzCV,YAAY,KACYW,KAAKC,SAAW,GAEpCH,EAAQ,CAAEnB,SAAAA,EAAUG,MAAAA,IAEpBiB,EAAO,CAAEpB,SAAAA,EAAUG,MAAAA,KAElBA","file":"03-promises.04ee01e6.js","sourceRoot":"../src","sourcesContent":["const refs = {  form: document.querySelector(\".form\"),\nbutton: document.querySelector(\"button\")\n}\nrefs.button.disabled = false;\nrefs.form.addEventListener(\"submit\", onBtnMakePromises)\nlet position = 0;\n\nfunction onBtnMakePromises (evt) {\n\nevt.preventDefault ();\nrefs.button.disabled = true;\n\nlet delay = Number(evt.currentTarget.elements.delay.value);\nconst step = Number(evt.currentTarget.elements.step.value);\nconst amount = Number(evt.currentTarget.elements.amount.value);\n\n\nsetInterval (() =>  {\n \nif (amount === position) { return }\nposition += 1;\nsetTimeout(() => {delay += step})\n\n  createPromise(position, delay) \n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n}, delay);\n\n}\nfunction createPromise(position, delay) {\n  const promise = new Promise ((resolve, reject) => {\nsetInterval(() => {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    resolve({ position, delay });\n  } else {\n    reject({ position, delay });\n  };\n  }, delay)\n})\nreturn promise;\n}\n\n"]}